// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model users {
  user_id     Int       @id @default(autoincrement())
  email       String    @unique @db.VarChar(255) //important
  name        String    @db.VarChar(255) //important
  username    String    @unique @db.VarChar(100) //important
  password    String //important
  role        String    @default("user") @db.VarChar(100) //important
  is_verified Boolean?  @default(false)
  verification_token String? @unique //important
  verification_token_expires DateTime? //important

  last_login  DateTime? @db.Timestamp(6) //important

  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)

  refresh_version Int       @default(0)         
  password_reset_token   String?  @unique
  password_reset_expires DateTime?
  phone_number String?
  is_deleted Boolean? @default(false)
  is_deleted_time DateTime?
  version Int @default(1)


  notes   notes[] // Relationship with ntoes
}

model test_database_crud {
  id          Int      @id @default(autoincrement())   // primary key
  no          Int
  dateTime    DateTime @db.Timestamptz                 
  description String   @db.VarChar(255)
  deleted     Boolean  @default(false)                 
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  deleted_at   DateTime?                                // nullable
  version     Int @default(1)
}


model notes {
  note_id   Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text //for potentially long content

  //AI Feature
  tags      String[] // For tag generation 
  sentiment String?  // For sentiment analysis


  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)
  
  is_deleted Boolean @default(false)
  deleted_at   DateTime?                                // nullable

  // Relation: to user
  user      users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id   Int

}